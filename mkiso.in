#!/usr/bin/bash
mydir=`dirname "$(readlink -f $0)"`/library
config=`dirname "$(readlink -f $0)"`/config
files=`dirname "$(readlink -f $0)"`/files
libdir=${libdir:-${mydir}}
tmp=/tmp/archbsd
date=`date +"%Y%m%d"`
iso_root="${tmp}/ArchBSD_iso"
usb_md_device=$[ RANDOM % 100 ]
rw_md_device=$[ RANDOM % 100 ]
var_md_device=$[ RANDOM % 100 ]

#default arguements, can be overwrote
usb_image_size=700
create_usb=0
create_iso=0
arches=('i686' 'x86_64')
init=('openrc')

base_package=(freebsd-configs freebsd-kernel freebsd-world pacman archbsd-keyring nano irssi)

die() {
    echo "$@"
    exit 1
}

if [ ! -x /usr/bin/mkisofs ]; then
	die "Need mkisofs for iso creation: install dvd+rw-tools"
fi

source "${libdir}"/checks.sh || die "Couldn't load needed library"
source "${libdir}"/global.sh || die "Couldn't load needed library"
 
show_help() {
	cat << EOF
	-u    size             Set USB image size in mb
	-c    usb/iso/all      Create the images without cleaning
	-a    arch             Create for specific arch
	-C                     Chroot into base before creating iso
	-i    init             Init system to use: openrc, freebsd-init
EOF
}

while getopts c:a:i:u:h args; do
  case ${args} in
    a)
                arches="$OPTARG"
                ;;
    u)
		usb_image_size="$OPTARG"
		;;
    i)
                init="$OPTARG"
                ;;
    c)
		case $OPTARG in
			usb)
				create_iso=1
				setup_base
				;;
			iso)
				create_usb=1
				setup_base
				;;
			all)
				setup_base
				;;
		esac
	      ;;
    h)
		show_help
		;;
    C)
		chroot_base="1"
		;;
    *)
		show_help
		;;
  esac
done
